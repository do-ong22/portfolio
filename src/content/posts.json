{
  "posts": [
    {
      "id": "python-basics",
      "title": "Python 기초 완벽 가이드",
      "date": "2024-01-15",
      "author": "작성자",
      "tags": ["Python", "기초", "문법"],
      "excerpt": "Python 문법과 기초 개념을 완전히 정리한 포스트입니다.",
      "content": "## Python 시작하기\n\nPython은 배우기 쉽고 강력한 범용 프로그래밍 언어입니다. 이 포스트에서는 기초 문법부터 활용 팁까지 자세히 다룹니다.\n\n### 1. Python 설치\n\n- [공식 사이트](https://www.python.org/)에서 다운로드\n- 설치 확인:\n```bash\npython --version\n```\n\n### 2. 기본 문법\n\n- 변수 선언:\n```python\nx = 10\ny = 'Hello'\nprint(x, y)\n```\n- 데이터 타입: int, float, str, bool, list, tuple, dict, set\n- 조건문:\n```python\nif x > 5:\n    print('x는 5보다 큽니다')\nelse:\n    print('x는 5 이하입니다')\n```\n- 반복문:\n```python\nfor i in range(5):\n    print(i)\n```\n\n### 3. 함수와 모듈\n\n- 함수 정의:\n```python\ndef add(a, b):\n    return a + b\nprint(add(2, 3))\n```\n- 모듈 사용:\n```python\nimport math\nprint(math.sqrt(16))\n```\n\n### 4. 데이터 구조\n\n- 리스트, 튜플, 딕셔너리, 집합\n- 예제:\n```python\nfruits = ['apple', 'banana', 'cherry']\nfruits.append('orange')\nprint(fruits)\n```\n\n### 5. 파일 입출력\n\n```python\nwith open('example.txt', 'w') as f:\n    f.write('Hello, Python!')\n\nwith open('example.txt', 'r') as f:\n    content = f.read()\nprint(content)\n```\n\n### 6. 실전 팁\n\n- Python 코드는 가독성이 가장 중요합니다.\n- PEP8 코딩 스타일을 지키세요.\n- 가상환경(venv) 사용으로 프로젝트별 패키지 관리"
    },
    {
      "id": "python-data-structures",
      "title": "Python 자료구조 완전 정리",
      "date": "2024-01-10",
      "author": "작성자",
      "tags": ["Python", "자료구조", "알고리즘"],
      "excerpt": "Python에서 자주 쓰는 자료구조와 활용 예제를 정리했습니다.",
      "content": "## Python 자료구조\n\nPython에서 자주 쓰이는 자료구조를 정리하고, 실무에서 활용하는 방법을 알려드립니다.\n\n### 1. 리스트(List)\n- 순서가 있는 컬렉션\n- 메서드: append, extend, insert, pop, remove, sort\n\n```python\nnumbers = [1, 2, 3, 4]\nnumbers.append(5)\nnumbers.sort(reverse=True)\nprint(numbers)  # [5,4,3,2,1]\n```\n\n### 2. 튜플(Tuple)\n- 변경 불가능한 순서가 있는 컬렉션\n- 패킹/언패킹 지원\n\n```python\npoint = (10, 20)\nx, y = point\nprint(x, y)\n```\n\n### 3. 딕셔너리(Dictionary)\n- 키-값 쌍으로 저장\n- 메서드: keys, values, items, get, update\n\n```python\nd = {'name':'Alice', 'age':25}\nd['city'] = 'Seoul'\nprint(d)\n```\n\n### 4. 집합(Set)\n- 순서 없음, 중복 제거\n- 연산: union, intersection, difference\n\n```python\ns1 = {1,2,3}\ns2 = {3,4,5}\nprint(s1 & s2)  # {3}\n```\n\n### 5. 활용 예제\n- 리스트 컴프리헨션, 딕셔너리 컴프리헨션\n```python\nsquares = [x**2 for x in range(10)]\nprint(squares)\n```\n- 자료구조 선택 기준: 데이터 크기, 검색/삽입 빈도, 메모리 고려\n\n### 6. 실전 팁\n- 자료구조를 적절히 활용하면 알고리즘 성능 향상\n- Python 내장 자료구조 활용 시 외부 라이브러리 최소화"
    },
    {
      "id": "python-libraries",
      "title": "Python 라이브러리 활용 가이드",
      "date": "2024-01-05",
      "author": "작성자",
      "tags": ["Python", "라이브러리", "실무"],
      "excerpt": "Python에서 자주 사용하는 라이브러리와 실무 활용 방법을 안내합니다.",
      "content": "## Python 라이브러리\n\nPython은 방대한 라이브러리 생태계를 가지고 있습니다. 데이터 분석, 웹 개발, 머신러닝 등 분야별 라이브러리를 소개합니다.\n\n### 1. 데이터 분석\n- **NumPy**: 배열 연산, 수치 계산\n- **Pandas**: 데이터프레임, 데이터 조작\n- **Matplotlib / Seaborn**: 시각화\n\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\narr = np.array([1,2,3,4])\ndf = pd.DataFrame({'A':[1,2,3], 'B':[4,5,6]})\nplt.plot(arr)\nplt.show()\n```\n\n### 2. 웹 개발\n- **Flask**: 경량 웹 프레임워크\n- **Django**: 풀스택 웹 프레임워크\n\n```python\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hello, Flask!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### 3. 머신러닝 / AI\n- **scikit-learn**: 지도/비지도 학습, 모델 평가\n- **TensorFlow / PyTorch**: 딥러닝 프레임워크\n\n```python\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\n```\n\n### 4. 실전 팁\n- 가상환경(venv, conda) 사용으로 패키지 충돌 방지\n- requirements.txt 작성으로 재현 가능한 환경 구성\n- 문서와 튜토리얼 활용: 공식 docs, StackOverflow, GitHub\n\n### 5. 추가 예제\n- CSV 데이터 읽고 전처리 후 시각화\n- 간단한 웹 API 서버 만들어 JSON 응답\n- 머신러닝 모델 학습 후 예측 결과 시각화"
    }
  ]
}
